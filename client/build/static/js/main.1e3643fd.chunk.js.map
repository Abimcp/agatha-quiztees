{"version":3,"sources":["Layout/Footer/index.js","Layout/Header/index.js","Pages/JoinQuiz/index.js","components/Button/index.js","components/Form/index.js","actions/index.js","components/QuestionCard/index.js","components/Countdown/index.js","components/SimpleSlider/index.js","components/Leaderboard/index.js","Pages/Landing/index.js","Pages/Leaderboard/index.js","Pages/Quiz/index.js","Pages/Setup/index.js","Pages/WaitingRoom/index.js","Pages/Results/index.js","App.js","reducers/gameplayReducers.js","reducers/questionsReducer.js","reducers/scoresReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["Footer","id","className","href","Header","JoinQuiz","Button","onClick","value","Form","useHistory","useState","username","setUsername","category","setCategory","players","setPlayers","difficulty","setDifficulty","question","setQuestions","onSubmit","event","preventDefault","console","log","htmlFor","type","name","onChange","e","target","answerQuestion","answer","score","stats","payload","loadingQuestions","settings","loadQuestions","questions","setError","err","getQuestions","dispatch","a","questionsRequest","message","fetch","resp","json","data","questionsArr","results","Error","QuestionCard","round","answered","useSelector","state","gameplay","selection","setSelection","optionElements","setOptionElements","useDispatch","options","sort","Math","random","randomiser","correct_answer","incorrect_answers","showAnswer","option","answeredClassName","isSelected","clickHandler","innerText","useEffect","map","choice","disabled","dangerouslySetInnerHTML","__html","Countdown","duration","interval","delay","reset","number","setNumber","setTimeout","existing","SimpleSlider","infinite","speed","slidesToShow","slidesToScroll","accessibility","autoplay","arrows","Component","Leaderboardlist","scores","Landing","history","push","Leaderboard","leaderboard","setLeaderboard","error","axios","get","scoreLine","item","i","Quiz","currentIndex","quizInfo","currentQuestion","setCurrentQuestion","setReset","length","document","location","Setup","WaitingRoom","Results","App","exact","path","initState","answers","gameplayReducer","action","stage","questionsReducer","playerScores","scoresReducer","errorReducer","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","persistor","persistStore","Boolean","window","hostname","match","ReactDOM","render","StrictMode","loading","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e3643fd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer id=\"footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-3 col-md-6 footer-contact\">\n            <h3>Agatha Quiztees</h3>\n          </div>\n        </div>\n\n        <div className=\"col-lg-2 col-md-6 footer-links\">\n          <h4>Useful Links</h4>\n          <ul>\n            <li>\n              <i className=\"bx bx-chevron-right\"></i> <a href=\"/\">Home</a>\n            </li>\n            <li>\n              <i className=\"bx bx-chevron-right\"></i> <a href=\"#\">About us</a>\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"container d-md-flex py-4\">\n          <div className=\"me-md-auto text-center text-md-start\">\n            <div className=\"copyright\">\n              &copy; Copyright{\" \"}\n              <strong>\n                <span>Agatha Quiztees</span>\n              </strong>\n              . All Rights Reserved.\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"./styles.css\";\n// import logo from \"../../profile.png\";\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      {/* <img src={logo} alt=\"logo\" /> */}\n      <h1>The Quiz With No Name </h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Header } from '../../Layout';\nimport { Footer } from '../../Layout';\n\nconst JoinQuiz = () => {\n    return (\n        <>\n        <Header />\n        <Footer />\n        </>\n    );\n}\n\nexport default JoinQuiz;\n","import React from 'react';\nimport './style.css';\n\nconst Button = ({onClick, value}) => ( \n    <button className=\"app-button\" onClick={onClick}>\n        {value}\n    </button>\n    );\n\n  export default Button;\n  \n// the idea here is that we only need one button component and pass it props whenever we need to use it, to allow us to fill it with a different label or allow it to perform a different onClick\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Form = () => {\n  let history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [players, setPlayers] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [question, setQuestions] = useState(\"\");\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    console.log(username, category);\n    // history.push(\"/quiz\");\n  };\n\n  return (\n    <>\n      <form onSubmit={submitHandler}>\n        <label htmlFor=\"uname\">Username</label>\n        <input\n          type=\"text\"\n          name=\"uname\"\n          value={username}\n          onChange={(e) => {\n            setUsername(e.target.value);\n          }}\n        />\n        <label htmlFor=\"category\">Category</label>\n        <select\n          value={category}\n          onChange={(e) => {\n            setCategory(e.target.value);\n          }}\n        >\n          <option value=\"generalKnowledge\">General Knowledge</option>\n          <option value=\"mythology\">Mythology</option>\n          <option value=\"art\">Art</option>\n          <option value=\"history\">History</option>\n        </select>\n        <label htmlFor=\"players\">Players</label>\n        <select\n          value={players}\n          onChange={(e) => {\n            setPlayers(e.target.value);\n          }}\n        >\n          <option value=\"player1\">1 Player</option>\n          <option value=\"player2\">2 Players</option>\n          <option value=\"player3\">3 Players</option>\n          <option value=\"player4\">4 Players</option>\n        </select>\n\n        <label htmlFor=\"difficulty\">Difficulty</label>\n        <select\n          value={difficulty}\n          onChange={(e) => {\n            setDifficulty(e.target.value);\n          }}\n        >\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n        <label htmlFor=\"question\">Question Type</label>\n        <select\n          value={question}\n          onChange={(e) => {\n            setQuestions(e.target.value);\n          }}\n        >\n          <option value=\"truefalse\">True or False</option>\n          <option value=\"multiple\">Multiple Choice</option>\n        </select>\n        <input type=\"submit\" />\n      </form>\n    </>\n  );\n};\n\nexport default Form;\n","\n// --------------------for gameplayReducer-----------------------------------//\nconst answerQuestion = (answer, score, stats) => ({\n    type: 'ANSWER_QUESTION',\n    payload: {\n        answer: answer,\n        score: score,\n        stats: stats\n    }\n});\n\nconst nextQuestion = () => ({ type: \"NEXT_QUESTION\" });\n\n// --------------------for questionsReducer--------------------------//\n\nconst loadingQuestions = (settings) => ({\n  type: \"LOADING_QUESTIONS\",\n  payload: settings,\n});\n\nconst loadQuestions = (questions) => ({\n  type: \"LOAD_QUESTIONS\",\n  payload: questions,\n});\n\nconst endGame = () => ({ type: \"END_GAME\" });\n\n// --------------------for scoresReducer------------------------------------//\n\nconst loadingScores = () => ({ type: \"LOADING_SCORES\" });\n\nconst loadScores = (scores) => ({ type: \"LOAD_SCORES\", payload: scores });\n\nconst setError = (err) => ({ type: \"SET_ERROR\", payload: `oh no! ${err}` });\n\n//----------------------------------------------------------------------------//\n\nconst getQuestions = async (dispatch, settings) => {\n  try {\n    dispatch(loadingQuestions(settings));\n    const questions = await questionsRequest(settings);\n    dispatch(loadQuestions(questions));\n  } catch (err) {\n    dispatch(setError(err.message));\n  }\n};\n\nconst getScores = async (dispatch, filter) => {\n    try {\n        dispatch(loadingScores);\n        const playerScores = await scoresRequest(filter);\n        dispatch(loadScores(playerScores));\n    } catch (err) {\n        dispatch(setError(err.message));\n    }\n}\n\n// --------------------------------helpers-----------------------------------//\n\nconst questionsRequest = async (settings) => {\n    try {\n        // const resp = await fetch(`https://opentdb.com/api.php?amount=${settings.amount}&category=${settings.category}&difficulty=${settings.difficulty}&type=${settings.type}`);\n        const resp = await fetch('https://opentdb.com/api.php?amount=10&category=&difficulty=&type=')\n        const data = await resp.json();\n        const questionsArr = data.results;\n        return questionsArr;\n    } catch (err) {\n        throw new Error('failed to fetch questions');\n    }\n}\n\nconst scoresRequest = async (filter) => {\n    try {\n        const resp = await fetch(filter ? `insert link to deployed server/${filter}` : 'insert link');\n        const data = await resp.json();\n        //expecting an array to be returned from API\n        return data;\n    } catch (err) {\n        throw new Error('failed to fetch scores');\n    }\n}\n\nexport { getQuestions, getScores, answerQuestion, nextQuestion, endGame, setError, loadQuestions, loadingQuestions, loadScores, loadingScores };\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { answerQuestion } from '../../actions'\nimport './style.css'\n\n\nconst QuestionCard = ({ round }) => {\n\n    const answered = useSelector(state => state.gameplay.answered)\n\n    const [selection, setSelection] = useState(null)\n    const [optionElements, setOptionElements] = useState()\n\n    const dispatch = useDispatch()\n    const options = randomiser([round.correct_answer, ...round.incorrect_answers])\n\n    useEffect(() => {\n        if (selection) { dispatch(answerQuestion('')) }\n        const renderOptions = () => {\n            return options.map(choice => (\n                <button className={`option ${showAnswer(choice)} ${isSelected(choice)}`}\n                    disabled={answered} onClick={clickHandler} dangerouslySetInnerHTML={{ __html: choice }} />)\n            )\n        }\n        setOptionElements(renderOptions)\n        return () => setSelection(null)\n    }, [selection, answered, round])\n\n    function showAnswer(option) {\n        const answeredClassName = option == round.correct_answer ? 'correct' : 'incorrect';\n        const classStyling = answered ? answeredClassName : 'unanswered';\n        return classStyling\n    }\n\n    function randomiser(options) {\n        const randomised = options.sort(() => Math.random() - 0.5)\n        return randomised\n    }\n\n    function isSelected(option) {\n        const classStyling = option == selection ? 'selected' : '';\n        return classStyling\n    }\n\n    function clickHandler(e) {\n        setSelection(e.target.innerText)\n    }\n\n    return (\n        <article>\n            <div className='question' dangerouslySetInnerHTML={{ __html: round.question }} />\n            <div className='choices'>\n                {optionElements}\n            </div>\n        </article>\n    )\n}\n\nexport default QuestionCard;","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { answerQuestion, nextQuestion } from '../../actions'\n\nconst Countdown = ({ duration, interval, delay, reset }) => {\n\n    const [number, setNumber] = useState(duration)\n\n    const dispatch = useDispatch()\n\n    const answered = useSelector(state => state.gameplay.answered)\n\n    useEffect(() => {\n        if (number > 0) {\n            setTimeout(() => setNumber(existing => existing - 1), interval)\n        } else {\n            if (!answered) { dispatch(answerQuestion('', [], [])) }\n            setTimeout(() => dispatch(nextQuestion()), delay)\n        }\n    }, [number])\n\n    useEffect(() => {\n        setNumber(duration)\n    }, [reset])\n\n    return (\n        <div>\n            <span>{number}</span>\n        </div>\n    )\n}\n\nexport default Countdown","import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport \"./styles.css\";\n\nexport default class SimpleSlider extends Component {\n  render() {\n    const settings = {\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      accessibility: true,\n      autoplay: true,\n      arrows: false,\n    };\n    return (\n      <div>\n        <h2> </h2>\n        <Slider {...settings}>\n          <div>\n            <h3>About</h3>\n          </div>\n          <div>\n            <h3>Quiz With Your Friends</h3>\n          </div>\n          <div>\n            <h3>Sell Your Soul</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Leaderboardlist = ({ scores }) => {\n  //for loop\n  return (\n    <>\n      <div className=\"leaderboard-item\">\n        <p>{scores.username}</p>\n        <p>{scores.category}</p>\n        <p>{scores.score}</p>\n      </div>\n    </>\n  );\n};\n\nexport default Leaderboardlist;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Header } from \"../../Layout\";\nimport { Footer } from \"../../Layout\";\nimport { SimpleSlider } from \"../../components\";\nimport { Button } from \"../../components\";\nimport \"./style.css\";\n\nconst Landing = () => {\n  let history = useHistory();\n\n  const hostQuiz = () => {\n    history.push(\"/settings\");\n  };\n\n  const joinQuiz = () => {\n    history.push(\"/joinQuiz\");\n  };\n  const leaderboard = () => {\n    history.push(\"/leaderboard\");\n  };\n  const singlePlayer = () => {\n    history.push(\"/settings\");\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"container align-items-center justify-content-center\">\n        <SimpleSlider />\n        <div>\n          <div className=\"buttonContainer\">\n            <Button value=\"Single Player\" onClick={singlePlayer} />\n          </div>\n          <div className=\"buttonContainer\">\n            <Button value=\"Host Quiz\" onClick={hostQuiz} />\n          </div>\n          <div className=\"buttonContainer\">\n            <Button value=\"Join Quiz\" onClick={joinQuiz} />\n          </div>\n          <div className=\"buttonContainer\">\n            <Button value=\"Leaderboard\" onClick={leaderboard} />\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Landing;\n","import React, { useState, useEffect } from \"react\";\nimport { Header } from \"../../Layout\";\nimport { Footer } from \"../../Layout\";\nimport axios from \"axios\";\nimport { LeaderboardList } from \"../../components\";\nimport \"./style.css\";\n\nconst Leaderboard = () => {\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(async () => {\n    const { data } = await axios.get(\"http://localhost:3000/leaderboard/\");\n    setLeaderboard(data.scores);\n  }, []);\n\n  const scoreLine = leaderboard.map((item, i) => (\n    <div className=\"scores-container\" key={i}>\n      <LeaderboardList scores={item} />\n    </div>\n  ));\n  return (\n    <>\n      <Header />\n      <div className=\"flex-container\">\n        <h1> LEADERBOARD </h1>\n\n        {/* <LeaderboardList /> */}\n        {error ? <p>{error}</p> : scoreLine}\n        {/* <Footer /> */}\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Leaderboard;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getQuestions } from '../../actions';\nimport { Countdown, QuestionCard } from '../../components';\nimport { Header, Footer } from '../../Layout';\n\n\nconst Quiz = () => {\n    //temporary\n    const dispatch = useDispatch()\n\n    const currentIndex = useSelector(state => state.gameplay.currentIndex)\n    const questions = useSelector(state => state.quizInfo.questions)\n\n    const [currentQuestion, setCurrentQuestion] = useState(questions[currentIndex])\n    const [reset, setReset] = useState(false)\n\n    // getQuestions(dispatch)\n\n    useEffect(() => {\n        if (currentIndex == questions.length) {\n            console.log('going to results')\n            document.location = '/results'\n        } else {\n            setCurrentQuestion(questions[currentIndex])\n        }\n        return () => setReset(existing => existing ? false : true)\n    }, [currentIndex])\n\n\n    //if the index is the equal to the questions.length - 1 \n\n    return (\n        <div>\n            <Countdown duration={5} interval={1000} delay={3000} reset={reset} />\n            <QuestionCard round={currentQuestion} />\n            <span>{currentIndex}</span>\n        </div >\n    );\n}\n\nexport default Quiz;\n","import React from 'react';\nimport { Header } from '../../Layout';\nimport { Footer } from '../../Layout';\nimport { Form } from '../../components';\nconst Setup = () => {\n    return (\n        <>\n        <Header />\n        <Form />\n        <Footer />\n        </>\n    );\n}\n\nexport default Setup;\n","import React from 'react';\nimport { Header } from '../../Layout';\nimport { Footer } from '../../Layout';\n\nconst WaitingRoom = () => {\n    return (\n        <>\n        <Header />\n        <Footer />\n        </>\n    );\n}\n\nexport default WaitingRoom;\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getQuestions, endGame } from '../../actions'\nimport { Button } from '../../components'\n\nconst Results = () => {\n    const dispatch = useDispatch()\n    const gameData = useSelector(state => state.gameplay.answer)\n    const settings = useSelector(state => state.quizInfo.settings)\n\n\n    useEffect(() => {\n        calculateScores(gameData)\n    }, [])\n\n    function calculateScores(data){\n        return null\n    }\n\n    async function playAgain() {\n        await getQuestions(dispatch, settings)\n        document.location = '/quiz'\n    }\n\n    function goHome() {\n        dispatch(endGame())\n        document.location = '/'\n    }\n\n    return (\n        <div>\n            <Button onClick={playAgain} value='play again' />\n            <Button onClick={goHome} value='return home' />\n        </div>\n    )\n}\n\nexport default Results;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Landing } from \"./Pages\";\nimport { Setup } from \"./Pages\";\nimport { WaitingRoom } from \"./Pages\";\nimport { Quiz } from \"./Pages\";\nimport { Results } from \"./Pages\";\nimport { Leaderboard } from \"./Pages\";\nimport { JoinQuiz } from \"./Pages\";\n\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <main>\n        <Switch>\n          <Route exact path=\"/\">\n            <Landing />\n          </Route>\n          <Route path=\"/setup\">\n            <Setup />\n          </Route>\n          <Route path=\"/waitingroom\">\n            <WaitingRoom />\n          </Route> \n          <Route path=\"/quiz\">\n            <Quiz />\n          </Route>\n          <Route path=\"/results\">\n            <Results />\n          </Route>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/joinquiz\">\n            <JoinQuiz />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const initState =\n{\n    answers: [],\n    score: [],\n    stats: [],\n    currentIndex: 0,\n    answered: false\n}\n\n\nconst gameplayReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOADING_QUESTIONS':\n            return {...state, answers: [], score: [], stats: [], currentIndex: 0, answered: false}\n\n        case 'ANSWER_QUESTION':\n            return (\n                {\n                    ...state,\n                    answers: [...state.answers, action.payload.answer],\n                    score: action.payload.score,\n                    stats: action.payload.stats,\n                    answered: true\n                }\n            );\n        case 'NEXT_QUESTION':\n            return { ...state, currentIndex: state.currentIndex + 1, answered: false };\n        default:\n            return state;\n    }\n}\n\nexport default gameplayReducer;","const initState =\n{\n    questions: [],\n    settings: {},\n    stage: null,\n}\n\nconst questionsReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOADING_QUESTIONS':\n            return { ...state, questions: [], settings: action.payload, stage: 'prepping' };\n        case 'LOAD_QUESTIONS':\n            return { ...state, questions: action.payload, stage: 'started' };\n        case 'END_GAME':\n            return { ...state, questions: [], settings: {}, stage: 'finished' };\n        default:\n            return state;\n    }\n}\n\nexport default questionsReducer;","const initState = {\n    playerScores: []\n}\n\nconst scoresReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOAD_SCORES':\n            return { ...state, playerScores: action.payload };\n        default:\n            return state;\n    }\n}\n\nexport default scoresReducer;","const initState = {\n    message: null\n}\n\nconst errorReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOADING_QUESTIONS':\n            return { ...state, message: null };\n        case 'LOADING_SCORES':\n            return { ...state, message: null };\n        case 'SET_ERROR':\n            return { ...state, message: action.payload };\n        default:\n            return state;\n    }\n}\n\nexport default errorReducer;","import { combineReducers } from 'redux'\n\nimport gameplayReducer from './gameplayReducers'\nimport questionsReducer from './questionsReducer'\nimport scoresReducer from './scoresReducer'\nimport errorReducer from './errorReducer'\n\nconst rootReducer = combineReducers(\n    {\n        gameplay: gameplayReducer,\n        quizInfo: questionsReducer,\n        leaderboard: scoresReducer, \n        error: errorReducer\n    })\n\nexport default rootReducer","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = createStore(persistedReducer, composeWithDevTools())\nconst persistor = persistStore(store)\n\nexport { store, persistor }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <App />\n        </PersistGate>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}